package habit_monster;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.SpringLayout;
import javax.swing.text.html.HTML.Tag;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JScrollPane;
import java.awt.Component;
import java.awt.Color;
import java.awt.Dimension;
import javax.swing.JTextField;
import javax.swing.JLabel;

public class Image_pane extends JPanel {
	public int y_locat = 30;
	private String wereput = "";
	Task_Panel_Actions actions = new Task_Panel_Actions();
	public ArrayList<String> tasknames= new ArrayList<String>();
	private ArrayList<ArrayList<String>> task= new ArrayList<ArrayList<String>>();
	public void open(String filename) throws FileNotFoundException, IOException{
		ArrayList<String>tagsstr=new ArrayList<String>();
		for (String line : Files.readAllLines(Paths.get(filename))) {
			  if(wereput.equals( "name")){
			    	System.out.println(line);
			    	tasknames.add(line);
			    	wereput="tags";
			    }
			  if (wereput.equals("tags")){
				  System.out.println(line);
				  
				  tagsstr.add(line);
				  
			  }
		    if(line.equals("task name")){
		    	wereput="name";
		    }
		    if(wereput.equals(".......")){
		    	
		    	task.add(tagsstr);
		    }
		  
		}
	}
	public void save(String filename){
		int inc=0;
		try(  PrintWriter out = new PrintWriter( filename )  ){
			for(String tasks: tasknames){
				
				 out.println( "task name" );
				    out.println( tasks );
				    out.println( "tags" );
				    for(String ttags: task.get(inc)){
				    	out.println( ttags );
				    }
				    out.println( "......." );
				
			}
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				
				e1.printStackTrace();
			}
		inc++;
	}

	public Image_pane() {
		
			try {
				open("autosave.txt");
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		
			// TODO Auto-generated catch block
		
		
		//save("autosave.txt");
		
		
		JPanel panel = new JPanel();

		panel.setOpaque(false);
		panel.setBackground(Color.RED);
		SpringLayout springLayout = new SpringLayout();
		setLayout(springLayout);
		
		JScrollPane scrollPane = new JScrollPane();
		springLayout.putConstraint(SpringLayout.NORTH, scrollPane, 13, SpringLayout.NORTH, this);
		springLayout.putConstraint(SpringLayout.WEST, scrollPane, 10, SpringLayout.WEST, this);
		springLayout.putConstraint(SpringLayout.SOUTH, scrollPane, -10, SpringLayout.SOUTH, this);
		springLayout.putConstraint(SpringLayout.EAST, scrollPane, 558, SpringLayout.WEST, this);
		scrollPane.setOpaque(false);
		  scrollPane.getViewport().setOpaque(false);
		    scrollPane.setBorder(null);
		scrollPane.setAlignmentX(Component.RIGHT_ALIGNMENT);
		add(scrollPane);
		for(String lodetask :tasknames){
			
			if (lodetask.equals("")){
				
				lodetask="Defalt task";
			}
			Taskpanel.setTask_txt(lodetask);
			for(Component task: panel.getComponents() ){
				task.setBounds(5, task.getY()+120 ,500, 100);
				
			}
			Taskpanel tpan = new Taskpanel();
			tpan.setBounds(5, 30 ,500, 100);
			panel.add(tpan);
			y_locat =y_locat + 120;
			panel.setPreferredSize(new Dimension(10, y_locat+100));
			actions.setDel_edit_num(actions.getDel_edit_num() + 1);
		}
		
		scrollPane.setViewportView(panel);
		panel.setLayout(null);
		
		textField = new JTextField();
		springLayout.putConstraint(SpringLayout.NORTH, textField, 177, SpringLayout.NORTH, this);
		springLayout.putConstraint(SpringLayout.EAST, textField, 0, SpringLayout.EAST, this);
		add(textField);
		textField.setColumns(10);
		
		JLabel lblNameOfTask = new JLabel("name of task");
		springLayout.putConstraint(SpringLayout.NORTH, lblNameOfTask, 157, SpringLayout.NORTH, this);
		lblNameOfTask.setForeground(Color.WHITE);
		springLayout.putConstraint(SpringLayout.SOUTH, lblNameOfTask, -6, SpringLayout.NORTH, textField);
		add(lblNameOfTask);
		
		JButton btnNewTask = new JButton("new task");
		springLayout.putConstraint(SpringLayout.WEST, textField, -26, SpringLayout.WEST, btnNewTask);
		springLayout.putConstraint(SpringLayout.NORTH, btnNewTask, 203, SpringLayout.NORTH, this);
		springLayout.putConstraint(SpringLayout.EAST, btnNewTask, -37, SpringLayout.EAST, this);
		springLayout.putConstraint(SpringLayout.EAST, lblNameOfTask, 0, SpringLayout.EAST, btnNewTask);
		springLayout.putConstraint(SpringLayout.SOUTH, textField, -6, SpringLayout.NORTH, btnNewTask);
		ArrayList<String> tags = new ArrayList<String>();
		btnNewTask.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				tags.removeAll(tags);
				tags.add("null");
				task.add(tags);
				
				
				//changes the location of the task panels
				for(Component task: panel.getComponents() ){
					task.setBounds(5, task.getY()+120 ,500, 100);
					
				}
				
				String tasktxt =textField.getText();
				textField.setText("");
				//sets the default txt
				if (tasktxt.equals("")){tasktxt="Defalt task";}
				//puts the tasks name in to an array
				tasknames.add(tasktxt);
				Taskpanel.setTask_txt(tasktxt);
				//saves the user info
				  save("autosave.txt");
				  //adds the task panel to the scroll panel 
				Taskpanel tpan = new Taskpanel();
				tpan.setBounds(5, 30 ,500, 100);
				panel.add(tpan);
				y_locat =y_locat + 120;
				panel.setPreferredSize(new Dimension(10, y_locat+100));
				panel.revalidate();
				panel.repaint();
				
				actions.setDel_edit_num(actions.getDel_edit_num() + 1);
				
				
			}
		});
		add(btnNewTask);
		
		JButton btnDeleatAllTasks = new JButton("deleat all tasks");
		btnDeleatAllTasks.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				panel.removeAll();
				task.removeAll(task);
				tasknames.removeAll(tasknames);
				y_locat=0;
				panel.setPreferredSize(new Dimension(10, y_locat+100));
				panel.revalidate();
				panel.repaint();
				
			}
		});
		springLayout.putConstraint(SpringLayout.SOUTH, btnDeleatAllTasks, -44, SpringLayout.NORTH, lblNameOfTask);
		springLayout.putConstraint(SpringLayout.EAST, btnDeleatAllTasks, 0, SpringLayout.EAST, lblNameOfTask);
		add(btnDeleatAllTasks);
		
		
		
	}

	
	
	private static final long serialVersionUID = 1L;
	BufferedImage image;
	private JTextField textField;
    {
        try {
            image = ImageIO.read(getClass().getResource("/habit_monster/anime_earth_warrior.jpg"));
        } catch (IOException ex) {
            Logger.getLogger(Task_Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
       
        float rateX =  (float)this.getWidth()/(float)image.getWidth();
        float rateY = (float)this.getHeight()/(float)image.getHeight();
        if (rateX>rateY){
            int W=(int)(image.getWidth()*rateY);
            int H=(int)(image.getHeight()*rateY);
            int x = (this.getWidth() -  W) / 2;
            int y = (this.getHeight() - H) / 2;
            g.drawImage(image, x, y,W,H, null);
        }
        else{
            int W=(int)(image.getWidth()*rateX);
            int H=(int)(image.getHeight()*rateX);
            int x = (this.getWidth() -  W) / 2;
            int y = (this.getHeight() - H) / 2;
            g.drawImage(image, x, y,W,H, null);
        }

    }
}
