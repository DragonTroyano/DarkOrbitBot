package takeAction;

import java.awt.Point;
import java.util.Timer;
import java.util.TimerTask;

import cargoSight.bonesBoxsearch;
import seeingComputer.StaticInfo;

public class Timers {
	private StaticInfo stc=new StaticInfo();
	protected Timer timer= new Timer();
	private boolean begin=true;
	private CursorControl robUI = new CursorControl(stc);
	private NormalColect colect = new NormalColect(robUI,stc);
	public bonesBoxsearch bonesBox = new bonesBoxsearch();
	public RunFromeEnimy runf=new RunFromeEnimy(robUI);
	private int n;
	private int lht;
	private boolean petshotat;
	private boolean on1_1;
	private boolean runing;
	private Point shipPoint;
	private boolean bclick=false;
	
	private boolean run;
	private Point mapPnt;
	public void startSeeing(){
		if(begin){
			stc.search();
			//stc.petSt.petColecting();
		/*timer.scheduleAtFixedRate (
			    new TimerTask() {
					//private boolean petColecting;
					public void run() {
						//colectingsetup();
						if(!run){
						bonesBox.findBonesBox(5, 20);
						bonesBox.Cargoonship(1, 1);
						bclick=bonesBox.click;
						shipPoint=stc.map.keapshipLock();
						if(bclick){
							robUI.rightclick(bonesBox.clickpoint);
							bonesBox.click=false;
						}
						}else{
							runf.setShipPoint(shipPoint);
							runf.run();
						}
			        	}}, 0, 1);
		timer.scheduleAtFixedRate (
			    new TimerTask() {
					private int nm=0;
					private boolean petHit;
					private boolean shipHit;
					public void run() {
						if(!run){
						shipPoint=stc.map.keapshipLock();
						shipHit=stc.shipstat.shipHit();
						petHit=stc.petSt.petLesSH;
						run=petHit;
						run=shipHit;
						colect.startPet();
						colect.keepPetColoecting();
						if(!bonesBox.cargoFound){
							colect.colect(shipPoint);
							
						System.out.println(nm);
					
							if(nm==5){
								colect.hmove();
							}
							if(nm==14){
								colect.stmove();
							}
							if(nm!=20){
							nm++;
							}
						
						}else{
							nm=0;
						}
						}
					}}, 0, 1);*/
			shipPoint=stc.map.keapshipLock();
			colect.colect(shipPoint);
			colect.stmove();
			mapPnt=stc.map.getMappnt();
			runf.setMapPnt(mapPnt);
			timer.scheduleAtFixedRate (
			new TimerTask() {
				public void run() {
					shipPoint=stc.map.keapshipLock();
					runf.setShipPoint(shipPoint);
		        	}
				}, 0, 1);
		begin=false;
		   
	}
		
		
	}
	private void colectingsetup(){
		shipPoint=stc.map.keapshipLock();
		if(on1_1){
			if(petshotat){
			colect.startPet();
			keepRepPet();
			}else{
			stopPet();
			}
		}else{
			if(runing){
			runAway();
			}else{
			
		colect.colect(shipPoint);
			}
		}
		
		
	}
	
	private void runAway() {
		
	}
	
	private void stopPet() {
		// TODO Auto-generated method stub
		if(stc.petSt.petup){
			if(n==1){
			robUI.rightclick(stc.petSt.petControlPoints[0]);
			}
			if(n>20){
				n=0;
			}
			System.out.println(n);
			n++;
		}
	}
	
	private void keepRepPet(){
		if(stc.petSt.petLesSH){
			petshotat=true;
			runing=true;
		}
		if(stc.petSt.petup&&stc.petSt.petLesHP){
			if(lht>7){
			if(lht==9){
				robUI.rightclick(stc.petSt.petControlPoints[1]);
				
				}
			if(lht>14){
				if(stc.petSt.dropdownShown()){
					robUI.rightclick(stc.petSt.petControlPoints[3]);
					
				}
				}
			if(lht>90){
				lht=6;
				}
				}
			lht++;
			}else{
			
			petshotat=false;
			runing=false;
			lht=0;
			}
		}
	
}
